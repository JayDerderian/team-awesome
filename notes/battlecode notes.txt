Battlecode Notes:

FROM: https://2021.battlecode.org/specs/specs.md.html#robots

terrain passability range 0.1 -> 1.0 inclusive
Bots should aim for passabilities n>=0.5 to do x action, otherwise y...?

find unused enlightenment centers!

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------

core resouce is influence, which is obtained by number of enlightment centers and
the results from certain bots

****use influence to win the most votes... THIS IS THE OBJECT OF THE GAME***

--------------------------------------------------------------------------------------
--------------------------------------------------------------------------------------


robots can only perform actions when their cooldown is less than 1.
cooldown penalty = base cooldown value / passability of current map square
cooldowns decrease by 1 each round regardless if they take an action or not

------
UNITS
------

units = soldiers. units are created by transferring influence to a new unit.

Newly built politicians and muckrakers will have a cooldown of 10 rounds if
a new unit is created. conviction is a unit's loyalty, earned by spending influence
on it.

units can move to unoccupied adjacent tiles under the following conditions:
- cooldown is low enough
- destination is directly adjacent
- destination is unoccupied

***Sensing note: POLITICIANS AND SLANDERERS SEE ALL SLANDERERS AS POLITICIANS***

-->So politicians AND slanderers will check like if(slanderer)==politician?

--Better always check if politician? 

--what if it's actually a slanderer that's attacked by a politician? do politicians attack? 
  does the politician lose influence if they wrongly attack?

------------------------------------------------------
Sense = detecting passability of nearby map squares
------------------------------------------------------

***Sensing note: Muckrakers have a larger detection radius than sensor. they
can detect bots much further away though they might not know what the terrain 
is like where that bot is.

------------------------------------------------------------------------------
Detect = ability to detect presence of nearby robots, though they DON'T know
any properties about those robots!
------------------------------------------------------------------------------

POLITICIANS:

Sense: Sees other slanderers as politicians!

NOTES: 
--Possibly try to prioritize motion towards neutral Enlightment centers, 
--while also watching out for enemy units and all slanderers.

--Prioritize motion towards terain with high passability, wherever possible.

--If a safe (meaning no enemy bots within action/motion radius) and neutral enlightenment
--center is found to be accessible, find easiest route (path with highest passability) by
--assessing all reachable map tiles/adjacent squares/whatever.

--Be mindful of computation time! There's a timer!! 


Ability - Empower:

--Gives speech to units within a specified range, including it's action radius
--All bots within range will be affected by the speech.
-- --All remaining conviction will be used to give the speech. 10 units of conviction will be lost. If the politician has less than 10c to start, no bots will be affected.

-- --conviction/n, where n = number of nearby bots
-- --Each friendly *unit* gains conviction, capped at units initial conviction. Muckraker
-- --buffs apply here.
-- --Each friendly *building* gains conviction. Friendly buildings *do not* get buffs from
-- --muckrakers
-- --Non-friendly (enemy or *neutral*) bot will *lose* conviction. 
-- --if c < 0:
-- -- -- Our team *gains* politicians, with c = to abs(diff (capped @ initial convition))
-- -- -- Slanderers and Muckrakers will be DESTROYED
-- -- -- Our team *gains* buildings, though excess conviction does not receive buffs from muckrakers.

ROBOT CONVERSION NOTE:
--Bot flags may be reset if they change team. If it rejoins later, we can't know if it'll 
--have the same ID, and our bot code will get a new copy (potentially slowing down computation time!)
 

SLANDERERS:

NOTES: 

---***Slanderers become Politicians after 300 rounds!***

--Prioritize motion towards terain with high passability, wherever possible.
--Avoid enemy muckrakers and units


--Abilities are entirely *passive!* Cannot change Embezzel or Camoflage abilities.
--Only user control is motion. Best to have avoid politicians. Have avoid by prioritizing
--motion towards terrains with greatest passability.   

--Embezzle(passive): Every 50 turns the Enlightenment center that created the muckraker
--will receive a finite amount of Influence (see site for exact formula... seems small).

--Slanderer claims dissapear from citizen's memory after 300 rounds, and it 
--***transforms into a politician of equal conviction***


MUCKRAKERS:

--Moves about the map looking for enemy slanderers.
--Can sense robot *details* in a SMALLER radius than entire robots

--Expose(active ability). If a Muckraker finds an enemy slanderer, the muckraker's team
--gets buff for their politicians speeches, specifically a multiplicative factor of
--1 + 0.001 * (slanderers influence) applied to conviction of the speech, after the
--10 units of conviction are deducted. muckraker buff stacks if multiple enemy slanderers
--are "exposed." 

ENLIGHTENMENT CENTERS:

NOTES:
--Ability to keep track of how many of each kind of bot we have deployed? 
--Can we decide which bot to spawn dependent on what we have on the field?

--Builds politicians, slanderers, and muckrakers and are the key to 
--influencing election victory.

--THEY CANNOT BE BUILT. 
--They only change teams due to empowerment from enemy politician speeches.

--BIDS INFLUENCE for a vote. This is not contigent on the robot's cooldown.

--PASSIVELY GENERATE INFLUENCE FOR TEAM, once per turn, where the amount
--generated is a function f(t) where t is the current round number.
-- -- f(t)= ceiling(0.2*(sqrt(t)))

--------------
COMMUNICATION
--------------

--BOTS CAN ONLY COMMUNICATE VIA A BUILT IN FLAG COLOR. 
--Colors are described as 24-bit integers, so any bot can 
--communicate a non-negative int less than 2e24. 
--bot flags ARE VISIBLE TO ALL OTHER BOTS THAT CAN SENSE IT, EVEN ENEMY BOTS

NOTES:

--Need to develop a communication system!!!

--"color-coded" some-how? 
--Maybe certain colors alert friendly units to nearby enemy bots? C
--Can the Enlightment Center send out color coded messages for the bots it creates
--and direct them? Can the bots store received flags from friendly bots?

--Enlightment Centers can see flags of *all* robots, and *all bots* can see EC flags

--Can friendly bots report back enemy flag colors?


-------------------
******VICTORY******
-------------------

**WIN BY OBTAINING THE MOST VOTES**
--Each round one citizen's vote is up for auction. 
--Enlightment Centers bid a non-negative amount of influence to win that vote.
--Neutral EC's always bid 0.

--If the bid is successfull, one vote is gained and the spent amount of influence
--is logged. If the bid fails, half the bidded influence will be deducted, rounded to
--nearest integer.

--If both teams have the same highest bid, the citizens vote for a unnamed third party.
--If this happens, both teams spend half their largest bid for the failed attempt.
--If multiple EC's within a tem bid highest amount, then ties are broken by
--lowest robot age, then lowest bot ID (same order as for Empower).


NOTE: 
--can we control the amount of influence spent contingent on specific conditions?
--is there a way to keep track of politician and muckraker location? 
--can we use the enlightenment center as a way to track bot location and send them
--coordinates? 


---------
BYTECODE
---------

--WHERE POSSIBLE, ACCOUNT FOR BYTECODE COSTS OF EACH NECESSARY FUNCTION!
--This might be tricky, but making everything as compact and fast as possible will
--allow for more action within a specified computation run time. 

--PER-TURN BYTECODE LIMITS FOR EACH BOT
--Politician: 15,000
--Slanderer: 7,500
--Muckraker: 15,000
--Enlightenment Center: 20,000

--The Clock class provides a way to identify the current round 
--(rc.getRoundNum()), and how many bytecodes have been executed during the 
--current round (Clock.getBytecodeNum())

--GameActionExceptions are thrown when something cannot be done. 
--It is often the result of illegal actions such as moving onto another robot, 
--or an unexpected round change in your code. 

--***Thus, you must write your player defensively*** and handle 
--GameActionExceptions judiciously. 

--You should also be prepared for any ability to fail and make sure that 
--this has as little effect as possible on the control flow of your program.

--Throwing any Exceptions cause a bytecode penalty of *500 bytecodes.* 
--Unhandled exceptions may **paralyze your robot.**
